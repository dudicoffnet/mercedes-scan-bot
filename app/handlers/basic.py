
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import os

router = Router()

CHANNEL_ID = -1002076509155
MASTER_USERNAME = "u_468345698"
CHANNEL_OPEN_URL = "https://t.me/+3kyBWqh-b1lkZDEy"

BANNER_FILE_ID = os.getenv("BANNER_FILE_ID")
BANNER_URL = os.getenv("BANNER_URL")
GREETING_TEXT = os.getenv("GREETING_TEXT", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Mercedes\nXENTRY / DAS ‚Äî –æ—Ç 30 —Ä—É–±–ª–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:")

kb_main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
    [KeyboardButton(text="üí∞ –¶–µ–Ω—ã")],
    [KeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")],
], resize_keyboard=True)
kb_cancel = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

def channel_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram", url=f"https://t.me/{MASTER_USERNAME}")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=CHANNEL_OPEN_URL)],
    ])

class Booking(StatesGroup):
    name = State()
    car = State()
    date = State()
    phone = State()

@router.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    sent = False
    if BANNER_FILE_ID:
        try:
            await m.bot.send_photo(m.chat.id, BANNER_FILE_ID, caption=GREETING_TEXT)
            sent = True
        except Exception:
            pass
    if (not sent) and BANNER_URL:
        try:
            await m.bot.send_photo(m.chat.id, BANNER_URL, caption=GREETING_TEXT)
            sent = True
        except Exception:
            pass
    if not sent:
        await m.answer(GREETING_TEXT)
    await m.answer("–ú–µ–Ω—é:", reply_markup=kb_main)

@router.message(F.text == "üí∞ –¶–µ–Ω—ã")
async def prices(m: Message):
    await m.answer("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å XENTRY/DAS ‚Äî –æ—Ç 30 BYN\n–ö–æ–º–ø–ª–µ–∫—Å –∏ –¥–æ–ø. —Ç–µ—Å—Ç—ã –æ–±—Å—É–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏.", reply_markup=kb_main)

@router.message(F.text == "üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")
async def contact(m: Message):
    await m.answer(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º: @{MASTER_USERNAME}", reply_markup=kb_main)

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(m: Message, state: FSMContext):
    await state.set_state(Booking.name)
    await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=kb_cancel)

@router.message(Booking.name, F.text)
async def booking_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(Booking.car)
    await m.answer("–ú–æ–¥–µ–ª—å –∏ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: W204, 2013)")

@router.message(Booking.car, F.text)
async def booking_car(m: Message, state: FSMContext):
    await state.update_data(car=m.text.strip())
    await state.set_state(Booking.date)
    await m.answer("–£–¥–æ–±–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 16:00)")

@router.message(Booking.date, F.text)
async def booking_date(m: Message, state: FSMContext):
    await state.update_data(date=m.text.strip())
    await state.set_state(Booking.phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–º–æ–∂–Ω–æ —Å Telegram username).")

@router.message(Booking.phone, F.text)
async def booking_phone(m: Message, state: FSMContext):
    await state.update_data(phone=m.text.strip())
    data = await state.get_data()
    await state.clear()
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb_main)
    post = (
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Ä—Å–µ–¥–µ—Å\n"
        "üì£ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n"
        f"üßë –ò–º—è: {data['name']}\n"
        f"üöó –ú–æ–¥–µ–ª—å: {data['car']}\n"
        f"üïí –í—Ä–µ–º—è: {data['date']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üîó –û—Ç: @{m.from_user.username if m.from_user.username else m.from_user.id}"
    )
    try:
        await m.bot.send_message(CHANNEL_ID, post, reply_markup=channel_buttons())
    except Exception:
        await m.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª.")

@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
async def cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb_main)

@router.message(F.text)
async def echo(m: Message):
    await m.answer(f"–≠—Ö–æ: {m.text}", reply_markup=kb_main)
