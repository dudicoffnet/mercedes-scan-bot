# app/handlers/basic.py
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import logging

router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
kb_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üí∞ –¶–µ–Ω—ã")],
        [KeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")],
    ],
    resize_keyboard=True
)

kb_cancel = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# --- –ê–Ω–∫–µ—Ç–∞ (FSM) ---
class Booking(StatesGroup):
    name = State()
    car = State()
    date = State()
    phone = State()

@router.message(CommandStart())
async def cmd_start(m: Message):
    logging.info(f"/start –æ—Ç {m.from_user.id}")
    await m.bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–Ω–ª–∞–π–Ω –Ω–∞ Railway ‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_main
    )

@router.message(F.text == "üí∞ –¶–µ–Ω—ã")
async def prices(m: Message):
    await m.answer(
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Mercedes:\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –æ—Ç 50 BYN\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å —Ç–µ—Å—Ç–∞–º–∏ ‚Äî –æ—Ç 90 BYN\n"
        "–¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏.",
        reply_markup=kb_main
    )

@router.message(F.text == "üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")
async def contact(m: Message):
    await m.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º: @u_468345698", reply_markup=kb_main)

# --- –ó–∞–ø–∏—Å—å: –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã ---
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(m: Message, state: FSMContext):
    await state.set_state(Booking.name)
    await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=kb_cancel)

@router.message(Booking.name, F.text)
async def booking_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(Booking.car)
    await m.answer("–ú–æ–¥–µ–ª—å –∏ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: W204, 2013)")

@router.message(Booking.car, F.text)
async def booking_car(m: Message, state: FSMContext):
    await state.update_data(car=m.text.strip())
    await state.set_state(Booking.date)
    await m.answer("–£–¥–æ–±–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 16:00)")

@router.message(Booking.date, F.text)
async def booking_date(m: Message, state: FSMContext):
    await state.update_data(date=m.text.strip())
    await state.set_state(Booking.phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–º–æ–∂–Ω–æ —Å Telegram username).")

@router.message(Booking.phone, F.text)
async def booking_phone(m: Message, state: FSMContext):
    await state.update_data(phone=m.text.strip())
    data = await state.get_data()
    await state.clear()

    # –ò—Ç–æ–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    msg = (
        "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–ê–≤—Ç–æ: {data['car']}\n"
        f"–ö–æ–≥–¥–∞: {data['date']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['phone']}\n\n"
        "–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await m.answer(msg, reply_markup=kb_main)

    # –ó–¥–µ—Å—å –∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç–µ–±–µ –≤ –ª–∏—á–∫—É/–≥—Ä—É–ø–ø—É:
    # await m.bot.send_message(<YOUR_CHAT_ID>, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ...")

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb_main)

# –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ (—á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –æ—Ç–≤–µ—Ç)
@router.message(F.text)
async def echo(m: Message):
    await m.answer(f"–≠—Ö–æ: {m.text}", reply_markup=kb_main)
