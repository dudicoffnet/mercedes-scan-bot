from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import os

router = Router()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ ---
# 1) –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ADMIN_CHAT_ID —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (—á–∏—Å–ª–æ)
# 2) –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å /start —Å –∞–∫–∫–∞—É–Ω—Ç–∞ @u_468345698 ‚Äî –±–æ—Ç —Å–∞–º –∑–∞–ø–æ–º–Ω–∏—Ç —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–∏–π
ADMIN_CHAT_ID_ENV = os.getenv("ADMIN_CHAT_ID")
ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_ENV) if ADMIN_CHAT_ID_ENV and ADMIN_CHAT_ID_ENV.isdigit() else None
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "u_468345698")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ Railway

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
kb_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üí∞ –¶–µ–Ω—ã")],
        [KeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")],
    ],
    resize_keyboard=True
)

kb_cancel = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# --- –ê–Ω–∫–µ—Ç–∞ (FSM) ---
class Booking(StatesGroup):
    name = State()
    car = State()
    date = State()
    phone = State()

def is_admin_user(message: Message) -> bool:
    u = message.from_user
    return bool(u and u.username and u.username.lower() == ADMIN_USERNAME.lower())

async def notify_admin(bot, text: str):
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text)
            return True
        except Exception:
            pass
    return False

@router.message(CommandStart())
async def cmd_start(m: Message):
    global ADMIN_CHAT_ID
    # –ê–≤—Ç–æ–ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ username –ø—Ä–∏ –ø–µ—Ä–≤–æ–º /start
    if not ADMIN_CHAT_ID and is_admin_user(m):
        ADMIN_CHAT_ID = m.chat.id
        await m.answer(f"ADMIN_CHAT_ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_CHAT_ID}")
    await m.bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –æ–Ω–ª–∞–π–Ω –Ω–∞ Railway ‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_main
    )

@router.message(Command("setadmin"))
async def set_admin(m: Message):
    global ADMIN_CHAT_ID
    ADMIN_CHAT_ID = m.chat.id
    await m.answer(f"ADMIN_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_CHAT_ID}")

@router.message(F.text == "üí∞ –¶–µ–Ω—ã")
async def prices(m: Message):
    await m.answer(
        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Mercedes:\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –æ—Ç 50 BYN\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å —Ç–µ—Å—Ç–∞–º–∏ ‚Äî –æ—Ç 90 BYN\n"
        "–¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞—è–≤–∫–∏.",
        reply_markup=kb_main
    )

@router.message(F.text == "üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")
async def contact(m: Message):
    await m.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º: @u_468345698", reply_markup=kb_main)

# --- –ó–∞–ø–∏—Å—å: –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã ---
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(m: Message, state: FSMContext):
    await state.set_state(Booking.name)
    await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=kb_cancel)

@router.message(Booking.name, F.text)
async def booking_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(Booking.car)
    await m.answer("–ú–æ–¥–µ–ª—å –∏ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: W204, 2013)")

@router.message(Booking.car, F.text)
async def booking_car(m: Message, state: FSMContext):
    await state.update_data(car=m.text.strip())
    await state.set_state(Booking.date)
    await m.answer("–£–¥–æ–±–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 16:00)")

@router.message(Booking.date, F.text)
async def booking_date(m: Message, state: FSMContext):
    await state.update_data(date=m.text.strip())
    await state.set_state(Booking.phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–º–æ–∂–Ω–æ —Å Telegram username).")

@router.message(Booking.phone, F.text)
async def booking_phone(m: Message, state: FSMContext):
    await state.update_data(phone=m.text.strip())
    data = await state.get_data()
    await state.clear()

    msg = (
        "‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É\n"
        f"–ò–º—è: {data['name']}\n"
        f"–ê–≤—Ç–æ: {data['car']}\n"
        f"–ö–æ–≥–¥–∞: {data['date']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['phone']}\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{m.from_user.username if m.from_user.username else m.from_user.id}"
    )
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=kb_main)

    sent = await notify_admin(m.bot, msg)
    if not sent:
        # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫–∞–∫ –∑–∞–∫—Ä–µ–ø–∏—Ç—å
        await m.answer("–ú–∞—Å—Ç–µ—Ä –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ó–∞–π–¥–∏—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start (–∏–ª–∏ /setadmin), —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –¥–ª—è –∑–∞—è–≤–æ–∫.")

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb_main)

# –≠—Ö–æ –Ω–∞ –ø—Ä–æ—á–∏–µ —Ç–µ–∫—Å—Ç—ã
@router.message(F.text)
async def echo(m: Message):
    await m.answer(f"–≠—Ö–æ: {m.text}", reply_markup=kb_main)